09/10/2023

*** BACKEND (Yo) ***

Pasos seguidos:

0. Crear la carpeta backend



1. Configuracion del entorno:

1.1 Crea un entorno virtual para tu proyecto Django.
API Meteorologica\backend> python -m venv myenv

1.2 Activa el entorno virtual:
En Windows:
API Meteorologica\backend> myenv\Scripts\activate

1.3 Instala Django
https://docs.djangoproject.com/en/4.2/
API Meteorologica\backend> pip install django



2. Creación de un Proyecto Django

2.1 Crea un nuevo proyecto Django
\API Meteorologica\backend> django-admin startproject weather_app

2.2 Cambia al directorio del proyecto
\API Meteorologica\backend> cd weather_app



3. Creación de una Aplicación Django (Para submodulos (apps) --> saltar)

3.1 Crea una nueva aplicación dentro del proyecto
\API Meteorologica\backend\weather_app> python manage.py startapp weather



4. Configuración de la Base de Datos (Opcional) --> lo vamos a hacer
\API Meteorologica\backend\weather_app> python manage.py startapp weather_db

4.1 Rellenamos: \API Meteorologica\backend\weather_app\weather_db\models.py
con la informacion filtrada de la llamada a la API

4.2 Instalar la app weather_db
\API Meteorologica\backend\weather_app\weather_app\settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    ...
    'weather_app',
    'weather_db',

]

4.3 Realizar las migraciones de la DB:
(Estos comandos crearán la tabla weatherinfo en tu base de datos)
API Meteorologica\backend\weather_app> python manage.py makemigrations weather_db
API Meteorologica\backend\weather_app> python manage.py migrate


4.4 Lo vamos a crear todo desde weather_app porque desde weather_db no va importar funciones
--> creamos \weather_app\models.py
--> creamos \weather_app\functions.py y dentro el metodo guardar_datos_en_db
--> guardamos en la DB desde \weather_app\views.py
--> hacer las migraciones para weather_app (automaticamente crea la DB):
    API Meteorologica\backend\weather_app> python manage.py makemigrations weather_app
    API Meteorologica\backend\weather_app> python manage.py migrate


4.5 Crear un superusuario
\API Meteorologica\backend\weather_app> python manage.py createsuperuser
user: admin
pw: admin
email: admin@admin.com






5. Configuración de las Rutas (URLs)
\API Meteorologica\weather_app\weather_app\urls.py



6. Registro en OpenWeatherMap
user: weathersito
api: 073d3b7b9dbd1aed508be40f3f703f98



7. Creación de Vistas
API Meteorologica\weather_app\weather_app\views.py

Llamar a la API: https://openweathermap.org/current#name
https://api.openweathermap.org/data/2.5/weather?q={city name}&appid={API key}



8. Correr el servidor
API Meteorologica\weather_app> pip install requests
API Meteorologica\weather_app> python manage.py runserver
http://127.0.0.1:8000/weather/?city=Madrid



9. Codigo del pais a nombre del pais
API Meteorologica\weather_app> pip install pycountry







*** FRONTEND REACT (incompleto) ***

0. Node.js debe de estar instalado
   Crear la carpeta frontend



1. Crear la carpeta frontend en dentro del directorio \API Meteorologica
\API Meteorologica> npx create-react-app frontend-app



2. Realiza Solicitudes a la API de Django
Dentro de la aplicación de React, puedes usar la biblioteca axios para realizar solicitudes HTTP a tu API de Django.
\API Meteorologica> npm install axios





*** FRONTEND ANGULAR (Pablo) ***





*** CORRER LA APP ***
1. Abrir desde Pycharm el proyecto weatherFront:
\Desktop\pruebas\frontend\weatherFront



2. Correr desde el Pycharm el Angular CLI Server



3. Correr Django
API Meteorologica\backend> myenv\Scripts\activate
API Meteorologica\weather_app> python manage.py runserver



4. URL definida:
http://127.0.0.1:4200/